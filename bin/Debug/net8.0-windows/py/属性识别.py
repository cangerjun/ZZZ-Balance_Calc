from paddleocr import PaddleOCR
import json
import os
import re
import Levenshtein
from collections import Counter

def 字符串重合率(s1, s2):
    distance = Levenshtein.distance(s1, s2)
    max_len = max(len(s1), len(s2))
    similarity = 1 - (distance / max_len)
    return similarity

def 保存字典(字典, 字典名):
    # 将字典转换为字符串并保存到文本文件
    with open(f"./save/{字典名}.txt", "w", encoding="utf-8") as file:
        json.dump(字典, file, ensure_ascii=False, indent=4)

def 读取字典(字典名):
    with open(f"./json/{字典名}.txt", 'r', encoding='utf-8') as file:
        读取的角色库 = json.load(file)
    return 读取的角色库

def 图片ocr(图片名):
    图片路径 = f'./img/{图片名}.png'
    # 执行 OCR 识别，只进行文本识别
    result = ocr.ocr(图片路径, cls=False)  # cls=False，因为这里不需要角度分类
    txt = ""
    if result == [None]:
        print(f"{图片名}识别为空")
    else:
        # 遍历识别结果并拼接成一个字符串
        for line in result:
            for word_info in line:
                text = word_info[1][0]
                txt += text  # 拼接文本，不加分隔符
    print(f"{图片名}识别:{txt}")
    txt = re.sub(r'[^\u4e00-\u9fff0-9%.]', '', txt)
    return txt

def 转浮点数(txt):
    txt = re.sub(r'[^0-9%.]', '', txt)
    # 如果有百分号，将数值除以100
    if '%' in txt:
        txt = re.sub(r'[^0-9.]', '', txt)
        txt = float(txt)
        txt /= 100.0
    else:
        txt = float(txt)
    txt = round(txt, 3)
    return txt

def 验证(txt, 列表):
    txt = re.sub(r'[^\u4e00-\u9fff0-9]', '', txt)
    识别错误 = True
    for 值 in 列表:
        if 字符串重合率(txt, 值) == 1:
            识别错误 = False
            break
    if 识别错误:
        for 值 in 列表:
            if 字符串重合率(txt, 值) > 0.65:
                print(f"字符串{txt}与{值}相似度大于65%,判定相等")
                txt = 值
                break
    return txt

def 获取角色面板属性字典():
    返回字典 = {}
    返回字典["角色名"] = 验证(图片ocr("角色名"), 角色名列表)
    for i in range(1, 21, 2):
        键 = 验证(图片ocr(f"基础属性{i}"),角色面板列表)
        值 = 图片ocr(f"基础属性{i + 1}")
        返回字典[键] = 转浮点数(值)
    return 返回字典

def 获取核心技属性字典():
    返回字典 = {}
    核心技强化情况 = 转浮点数(图片ocr("核心技等级")) - 1
    if 核心技强化情况 == 0:
        返回字典["无"] = 0
        返回字典["基础攻击力"] = 0
        return 返回字典
    映射关系 = {1: (1, 0),2: (1, 1),3: (2, 1),4: (2, 2),5: (3, 2),6: (3, 3)}
    txt = 图片ocr("核心技词条").split("提升")
    A, B = 映射关系[核心技强化情况]
    键 = txt[0]
    值 = 转浮点数(txt[1]) * A
    返回字典[键] = round(值, 3)
    返回字典["基础攻击力"] = 25 * B
    return 返回字典

def 获取音擎属性字典():
    返回字典 = {}
    if os.path.exists(f"./img/武器0.png"):
        返回字典["音擎名"] = 验证(图片ocr("武器0"), 音擎名列表)
        返回字典["音擎id"] = 音擎列表[返回字典["音擎名"]]["音擎id"]
        for i in range(1, 4, 2):
            键 = 图片ocr(f"武器{i}")
            值 = 图片ocr(f"武器{i + 1}")
            返回字典[键] = 转浮点数(值)
    else:
        返回字典["音擎名"] = "未佩戴音擎"
        返回字典["基础攻击力"] = 0
        返回字典["无"] = 0
    return 返回字典

def 获取驱动盘主属性数组():
    返回数组 = [None] * 7
    for i in range(1, 7, 1):
        返回字典 = {}
        if os.path.exists(f"./img/驱动盘{i}_0.png"):
            txt = re.sub(r'[^\u4e00-\u9fff]', '', 图片ocr(f"驱动盘{i}_0"))
            驱动盘名 = 验证(txt,驱动盘名列表)
            返回字典["驱动盘名"] = 驱动盘名
            返回字典["驱动盘号"] = i
            键 = 验证(图片ocr(f"驱动盘{i}_1"), 驱动盘主属性列表[i])
            值 = 图片ocr(f"驱动盘{i}_2")
            返回字典[键] = 转浮点数(值)
        else:
            返回字典["驱动盘名"] = "未佩戴驱动盘"
            返回字典["驱动盘号"] = i
            返回字典["无"] = 0
        返回数组[i] = 返回字典
    return 返回数组

def 获取驱动盘随机属性数组():
    返回数组 = [None] * 7
    for i in range(1, 7, 1):
        返回字典 = {}
        if os.path.exists(f"./img/驱动盘{i}_0.png"):
            for r in range(3, 10, 2):
                if os.path.exists(f"./img/驱动盘{i}_{r}.png"):
                    键 = 验证(图片ocr(f"驱动盘{i}_{r}"), 驱动盘随机属性列表)
                    值 = 图片ocr(f"驱动盘{i}_{r + 1}")
                    值 = 转浮点数(值)
                    if 键 == "攻击力":
                        if 值 > 1:
                            键 = "小攻击力"
                    if 键 == "生命值":
                        if 值 > 1:
                            键 = "小生命值"
                    if 键 == "防御力":
                        if 值 > 1:
                            键 = "小防御力"
                    返回字典[键] = 值
                else:
                    返回字典[f"{round(r * 0.5 - 0.5)}无"] = 0
                    break
            返回数组[i] = 返回字典
        else:
            返回字典["1无"] = 0
            返回字典["2无"] = 0
            返回字典["3无"] = 0
            返回字典["4无"] = 0
            返回数组[i] = 返回字典
    return 返回数组

def 识别驱动盘两件套(字符串1, 字符串2, 字符串3, 字符串4, 字符串5, 字符串6):
    strings = [字符串1, 字符串2, 字符串3, 字符串4, 字符串5, 字符串6]
    套装 = Counter(strings)
    驱动盘两件套 = []
    索引 = 0
    for 键,值 in 套装.items():
        if 值 > 1:
            if 索引 >= len(驱动盘两件套):
                驱动盘两件套.extend([None] * (索引 + 1 - len(驱动盘两件套)))

            驱动盘两件套[索引] = 键  # 然后进行赋值
            索引 += 1
    return 驱动盘两件套

def 获取两件套属性字典(两件套列表):
    两件套属性 = {}
    两件套装数据 = 驱动盘列表
    for i in 两件套列表:
        if i == "未佩戴驱动盘":
            两件套属性.update({"无": 0})
            break
        两件套属性.update(两件套装数据[i])
    return 两件套属性

def main():
    角色面板属性字典 = 获取角色面板属性字典()
    核心技属性字典 = 获取核心技属性字典()
    音擎属性字典 = 获取音擎属性字典()
    驱动盘主属性数组 = 获取驱动盘主属性数组()
    驱动盘随机属性数组 = 获取驱动盘随机属性数组()
    角色属性字典 = 角色列表[角色面板属性字典["角色名"]]

    角色属性字典["基础生命值"] = 转浮点数(图片ocr("角色基础1"))
    角色属性字典["基础攻击力"] = 转浮点数(图片ocr("角色基础2")) - 核心技属性字典["基础攻击力"] - 音擎属性字典["基础攻击力"]
    角色属性字典["基础防御力"] = 转浮点数(图片ocr("角色基础3"))

    驱动盘两件套 = 识别驱动盘两件套(驱动盘主属性数组[1]['驱动盘名'], 驱动盘主属性数组[2]['驱动盘名'], 驱动盘主属性数组[3]['驱动盘名'], 驱动盘主属性数组[4]['驱动盘名'], 驱动盘主属性数组[5]['驱动盘名'], 驱动盘主属性数组[6]['驱动盘名'])
    两件套属性字典 = 获取两件套属性字典(驱动盘两件套)
    总字典 = {}
    总字典["角色属性"] = 角色属性字典
    总字典["音擎属性"] = 音擎属性字典
    总字典["两件套属性"] = 两件套属性字典
    for i in range(1, 7, 1):
        总字典[f"驱动盘主属性{i}"] = 驱动盘主属性数组[i]
        总字典[f"驱动盘随机属性{i}"] = 驱动盘随机属性数组[i]
    总字典["核心技属性"] = 核心技属性字典
    总字典["角色面板属性"] = 角色面板属性字典
    保存字典(总字典, 角色面板属性字典["角色名"])
    print(f"属性识别完毕,请关闭本窗口,点击加载,选择{角色面板属性字典['角色名']}.txt")

if __name__ == "__main__":
    print("加载模型中,请勿点击或关闭此窗口...")
    角色列表 = 读取字典("角色库")
    音擎列表 = 读取字典("音擎库")
    驱动盘列表 = 读取字典("驱动盘套装库")

    角色名列表 = list(角色列表.keys())
    音擎名列表 = list(音擎列表.keys())
    驱动盘名列表 = list(驱动盘列表.keys())
    核心技列表 = ["暴击率", "暴击伤害", "基础能量自动回复", "基础冲击力", "异常掌控", "穿透率"]
    驱动盘主属性列表 = [None] * 7
    驱动盘主属性列表[1] = ["小生命值"]
    驱动盘主属性列表[2] = ["小攻击力"]
    驱动盘主属性列表[3] = ["小防御力"]
    驱动盘主属性列表[4] = ["攻击力", "生命值", "防御力", "暴击率", "暴击伤害", "异常精通"]
    驱动盘主属性列表[5] = ["攻击力", "生命值", "防御力", "穿透率", "物理伤害加成", "火属性伤害加成", "冰属性伤害加成", "电属性伤害加成", "以太伤害加成"]
    驱动盘主属性列表[6] = ["攻击力", "生命值", "防御力", "异常掌控", "冲击力", "能量自动回复"]
    驱动盘随机属性列表 = ["攻击力", "生命值", "防御力", "暴击率", "暴击伤害", "异常精通", "穿透值"]
    角色面板列表 = ["攻击力", "生命值", "防御力", "暴击率", "暴击伤害", "异常精通", "穿透率", "异常掌控", "冲击力", "能量自动回复"]

    # 初始化 PaddleOCR
    ocr = PaddleOCR(
        det_model_dir=None,  # 我们不需要检测模型，因为只进行识别
        rec_model_dir='./model/rec',  # 指定识别模型的路径
        use_angle_cls=False,  # 不使用方向分类器
        lang='ch',  # 设置语言为中文
        log_level=3  # 设置日志级别为 3，即不输出日志
    )

    main()